Crear repositorio en github

	-	Secion 6 


git comandos

modificar config
	* git config --global -user.name "name"
	* git config --global -user.password "password"
	* git config --global -e -> para consultar los valores del config
	* git config --global alias.nombreAlias "Parametros que compondran ese alias <--all -- graph -- decorate>".  crear un alias 
	
inicializar proyecto
	* git init -> en la carpeta base del proyecto
	
comandos
	Status:
		* git status -> vemos como nos encontramos, los cambios o archivos que no estan en git.
		* git status -s -> muestra solo los archivos modificados/creados sin observaciones por parte de git de que podriamos hacer.
		* git status -s -b o git status -sb -> con -b le pedimos que ademas de mostrarnos la info en modo abreviado nos muestre en la rama en la que estamos.
	Add:
		* git add . -> añadimos todos los archivos que no están creados para después hacer un commit.
		* git add [nombre del archivo] -> (sin los corchetes) añadimos solo ese archivo.
		* git add *.png -> agregamos todos los archivos png.
		* git add "*.png" -> con las comillas agregamos todos los archivos png del proyecto.
		* git add --all -> agrega todos los archivos que se hayan modificado.
		* git add -A -> agrega todos los archivos que se hayan modificado.
		* git add css/ -> agregamos todos los archivos dentro de la carpeta css.
		* git add <index.html README.md tile.png> -> agregamos todos los archivos que queremos en un solo comando.
		* git add PDFS/*.pdf -> Añade de la carpeta PDFS todos los que sean de tipo pdf.(debe de ir todo junto si no agregamos todos los archivos).
	Commit:
		* git commit -> hacemos un snapshot de como se encuentra el proyecto.
		* git commit --amend -m "Mensaje" -> con --amend arreglamos el error anterior y al decirle -m, queremos arreglar el mensaje con este nuevo, del commit anterior.
	Checkout:
		* git checkout -- . -> revertir todos los cambios al último commit.
			-* Si en vez de poner el punto ponemos el nombre del archivo revertiremos los cambios de ese unico archivo.
			-* También podemos poner *.png revertiremos todos los cambios de los archivos de ese tipo.
			-* css/ revertiremos todos los cambios de esa carpeta en concreto.
	Log:
		* git log -> nos muestra una linea temporal con todos los commits que hemos hecho, diciendo usuario e email + fecha + comentario.
	Reset:
		* git reset -> eliminamos todos los cambios del stage antes de hacer el commit.
		* git reset *.png -> retiramos los archivos png.
		* git reset --soft HEAD^ -> --soft es decirle que queremos hacer un reset blandito, hay diferentes tipos de reset. 
		* git reset --mixed identCommit -> identCommit son los numeros y letras para identificar el commit en el log, con el vamos al punto en el tiempo que queremos conservando los cambios fuera del stage listos para commitearlos de nuevo si queremos.
		* git reset --hard -> 
			* Si lanzamos este comando despues de ir a otra linea temporal eliminaremos todos los cambios hechos hasta ese momento y el punto mas alto de nuestra linea será en la que nos encontremos en este momento.
			* Si lanzamos ese comando con un identificador de commit regresaremos a ese punto, tambíen sirve para ir hacia adelante en la linea, indicando el punto con el ident del commit donde queremos ir.
	reflog:
		* git reglog -> con este parametros vemos mas haya del git log, vemos los viajes en la linea temporal que hemos ido haciendo, aunque hayamos usado reset --hard para eliminar commits, podríamos verlos y volver a ellos nuevamente.
	
	mv :
		* git mv nombreArchivo.type nuevonombre.type(renombramos) o nombreArchivo.type carpeta/ (movemos a una carpeta nueva).

	checkout:
		* git checout -- . -> eliminamos cambios y regresamos al último commit de esa rama.
		* git checkout -b *rama* -> creamos y nos movemos a una nueva rama.
(Visto en Tema4)
	merge :
		* git merge *rama a traer* -> nos movemos a la rama principal o a la que queremos traer los cambios.
	branch :
		* git branch -> nos muestra las ramas que tiene git.
		* git branch -d *rama* -> eliminamos la rama de git.
	tag :
		* git tag -a *nombre del tag* -m "descripción del tag" -> añadir versionado
		* git tag -a *nombre del tag* IDENTCOMMIT -m "descripción del tag" -> añadir versionado con el identificador a un commit antiguo.
	show : 
		* git show *nombre del tag/ident commit/fichero* -> nos muestra toda la info del tag.
			- quien lo subio
			- cambios que se hicieron
			- etc
(Visto en Tema5)
	stash :
		* git stash -> alamcena el proyecto como lo tenemos hasta la fecha y nos deja la rama como en el último commit.
		* git stash apply -> recuperamos el últim o stash guardado,
		* git stash applu stash@{1} -> recuperamos el stash de la posición 1 (Penultimo guardado).
		* git show stash -> nos muestra info al detalle de los ocurrido en ese stash.
		* git show stash stash@{1} -> nos muestra info al detalle del stash de la posición 1.
		* git stash pop -> POP nos hace recuperar el último stash y se elimina a su vez ese stash (como si eliminaramos una rama).
		* git stash drop -> elimina el último stash, este es necesario xq al hacer un stash pop hubierón conflictos y git no lo elimino
		* git stash drop stash@{1}eliminamos el stash de la posición 1.
		* git stash save --keep-index -> guarda todos los archivos menos los que están en el stage ya que esos estarán listo para hacer el commit.
		* git stash save --include-untracked -> guarda todos los archivos junto a los que git no les da seguimiento ya que los has creado pero aun no has realizado un commit sobre ellos.
		* git stash save "mensaje descriptivo".
		* git stash clear -> manera hardcore de eliminar todos los stash sin posbilidad de recuperación.
		* git stash list -> para ver todos los trabajos pendientes en el stash

	rebase:
		* git rebase *rama principal* -> nos traería todos los commits después de crear una rama a ese punto ej: 
					3*	5*					5*							5*
					 |	 |					 |							 |
					2*	4*		---->  		4*							4*	
					 |	/					 /	se vería de 			 |
					 							la suguiente manera 	3*
					1*/					3* /		->					 |
										 |								2*
										2*								 |	
										 |								1*
										1*  
		* git rebase -i HEAD~4 -> tomamos los últimos 4 commits, nos mostrar una pantalla de info que podemos escribir apretando la tecla A, arriba nos mostrar los commit de mas viejo a mas nuevo (el último commit estará el último '4') poniendo al principio la palabra pick, 
			- si lo que queremos es unir/fusionar los 2 último commit debemos poner la palabra squash o s en lugar de pick, seguidamente nos mostrar una pantalla similar en la que tendremos que indicar cual será el mensaje de unión de esos commits.
			- si lo que queremos es modificar un commit debemos cambiar la palabra pick por edit, despues no estaremos en ninguna rama (limbo) seguido esto debemos hacer git reset HEAD^ para irnos al último commit. en es punto podemos hacer las modificaciones que queramos seprar por commits eliminar cambios, etc. Cuando tengamos las cosas como queremos debemos hacer git rebase --continue y se guardaran los cambios.


(Visto en el tema6)
	push:
		* git push --tag -> subimos todos los commits que hayamos marcado como tags a github.
		* git push -u origin *branch* -> nos sube todos los cambios a nuestra rama remota y con el -u adjudicamos por defecto los pushes a esa rama
		* git push -d origin *branch* -> eliminamos una rama en remoto.
		* git push origin :*branch* -> realiza la misma función que la anterior, eliminamos una rama en remoto.

	remote
		* git remote -> nos dice los repositorio que tenemos.
		* git remote -v -> nos indica las URLs donde hacemos los fetch y el push. 

(visto en el tema7)
	fetch:
		* git fetch -> nos trae todos los cambios que hay en remoto.

	pull: 
		* git pull origin *branch* -> nos trae todos los cambio y a la vez mergea en local

(Visto en el tema8)
	prune:
		* git remote prune origin -> limpiamos todas las ramas del remoto que hayan sido eliminadas en el servidor pero nos sigan apareciendo como existentes y no podamos borrarlas con un push -d o push origin :*branch*
		
Parametros rebase:
	- Squash(s): unir commits.
	- reword(r): renombrar el mensaje del commit.
	- edit(e): Podemos editar el commit , modificar los archivos que se subiron en ese commit , separarlo en dos, solo subir un archivo y el otro revertir cambios etc.
		
Parametros (shorcuts)

-b -> branch
-s -> Silent (muestra solo la información importante).
-A -> es --all
-m -> mensaje, seguidamente añadimos el mensaje.
-a :
	* para commit significa add (añadir al stage)
	* para tag significa anotación (nombre del tag)
-u -> actualizar stage
-d -> delete
-i -> interactivo para el rebase

Parametros iniciales.

* HEAD -> queremos decir que afecte al último commit.
	* ^ -> si añadimos el caracter bajaremos un punto en la linea temporal, es decir una versión atras del último commit.
* oneline -> resumir toda la info que sugiere git en una linea con los datos importantes.
* status -> ver el estado en el que se encuentra, si hay cambios realizados.
* log -> vemos los diferentes commit que se han realizado.
* checkout :
	* revertir cambios al último commit git checkout -- .
	* cambiar de rama -> git checkout *rama*
* reset -> volver cosas atras para realizar modificaciones pero sin eliminar:
	* quitar cosas del stage.
	* quitarlas para hacer un nuevo commit.
* diff -> para observas diferencias del último commit al momento actual
	* --staged -> si añadimos --staged a continuación veremos los cambios que tenemos en el stage antes de hacer el commit.
* mv -> para cambiar el nombre y moverlo a otra carpteta
* bracnh -> no muestra las ramas que tenemos en git.
* stash -> Guardamos una tarea para recuperarla mas tarde.
* rebase -> movemos el head para actualizar el orden de los commits (clase 37^)




	
	